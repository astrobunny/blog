include "util.rb"

require "yaml"
require "uri"

set_global :google_tracking_code, "UA-7604545-1"

FileUtils.mkdir_p "cache"
post_modified_dates_cache_file = "cache/post_modified_dates"

pages = [
  {name: "Home", path: "/"}
]

categories = {}
tags = {}
years = {}
months = {}
days = {}
posts = {}

tag_counts = []

search_items = {}

prev_post_modified_dates = {}
post_modified_dates = {}
if File.exist? post_modified_dates_cache_file
  prev_post_modified_dates = JSON.parse(File.read(post_modified_dates_cache_file));
end

# Top level pages
Dir["pages/*.md"].each do |page_name|
  raw = page_name.sub(/^pages\//, "").sub(/.md$/, "")

  yml = YAML.load_file page_name

  pages << {name: yml["title"], path: "/#{raw}"}
end

Dir["posts/*.md"].sort.reverse.each do |post_file|

  yml = YAML.load_file post_file

  post_modified_dates[post_file] = File.mtime(post_file).to_i

  if categories[ yml["category"] ] == nil
    categories[ yml["category"] ] = []
  end

  categories[ yml["category"] ] << post_file

  yml["tags"].each do |tag|
    if tags[ tag ] == nil
      tags[ tag ] = []
    end

    tags[ tag ] << post_file
  end

  post_time = Time.at(yml["create_time"].to_i)

  if years[ post_time.year ] == nil
    years[ post_time.year ] = []
  end
  years[ post_time.year ] << post_file

  if months[ post_time.strftime("%Y/%m") ] == nil
    months[ post_time.strftime("%Y/%m") ] = []
  end
  months[ post_time.strftime("%Y/%m") ] << post_file

  if days[ post_time.strftime("%Y/%m/%d") ] == nil
    days[ post_time.strftime("%Y/%m/%d") ] = []
  end
  days[ post_time.strftime("%Y/%m/%d") ] << post_file

  post_name = URI.unescape(post_file.sub(/^posts\//, "").sub(/.md$/, "").sub("-","/").sub("-","/").sub("-","/"))
  posts[post_name] = post_file
end


tags.each do |tag, post_array|
  tag_counts << {tag: tag, count: post_array.length}
end
tag_counts.sort_by! { |x| -x[:count] }

#p (0...50).map{|x| tag_counts[x]}.to_a

post_is_expired_proc = Proc.new do |post_file|

  #if post_file.include? "kotomi-post"
  #   puts "ON : #{post_file}"
  #   puts "NOW : #{post_modified_dates[post_file].to_i}"
  #   puts "LAST : #{prev_post_modified_dates[post_file].to_i}"
  #   puts "RES : #{post_modified_dates[post_file].to_i == prev_post_modified_dates[post_file].to_i}"
  #end

  #puts "MODIFICATION DETECTED ON : #{post_file}"
  #puts "NOW : #{post_modified_dates[post_file].to_i}"
  #puts "LAST : #{prev_post_modified_dates[post_file].to_i}"

  post_modified_dates[post_file] != prev_post_modified_dates[post_file]

  true
  
end

Dir["pages/**/*.md"].each do |page_name|

  raw = page_name.sub(/^pages\//, "").sub(/.md$/, "").downcase

  yml = YAML.load_file page_name

  cache_has_expired = post_is_expired_proc.call(page_name)

  blog_page yml["title"], raw, pages: pages, categories: categories, months: months, days: days, tags: tag_counts, cache_expired: cache_has_expired do

    page_content(yml["title"], raw, render(page_name), yml["pic"], yml["author"], []) do

      if yml["gallery"]
        images = Dir["images/wp-gallery/#{yml["gallery"]}/*.jpg"].map {|filename| "/#{filename}"}
        thumbnails = images.map {|filename| filename.gsub("/hinagiku/", "/hinagiku/thumbs/thumbs_")}
        gallery images, thumbnails
      end

      # List child pages automatically
      if Dir.exist? "pages/#{raw}"
        h4 "Child pages:"
        ul do
          Dir["pages/#{raw}/*.md"].each do |child_page|
            child_raw = child_page.sub(/^pages\//, "").sub(/.md$/, "")
            child_yml = YAML.load_file child_page
            li { a child_yml["title"], href:"/#{child_raw}" }
          end
        end
      end

    end
  end
end


posts.each do |post_name,post_file|

  yml = YAML.load_file post_file
  post_time = Time.at(yml["create_time"].to_i)

  cache_has_expired = post_is_expired_proc.call(post_file)

  blog_page yml["title"], post_name, pages: pages, calendar_time: post_time, categories: categories, months: months, days: days, tags: tag_counts, cache_expired: cache_has_expired do
    content = render(post_file).gsub(/(&lt;!--more--&gt;)|(<!--more-->)/, "")
    post_content(yml["title"], post_name, content, yml["category"], nil, yml["author"], yml["tags"], yml["create_time"].to_i)
  end

end

categories.each do |cat_name,posts|
  post_index_page(posts, 
    cat_name, 
    "categories/#{slug(cat_name)}", 
    "categories/#{slug(cat_name)}", 
    pages: pages, 
    categories: categories, 
    months: months, 
    days: days, 
    tags: tag_counts, 
    post_is_expired_proc: post_is_expired_proc)
end

tags.each do |tag_name,posts|
  post_index_page(posts, 
    tag_name, 
    "tags/#{slug(tag_name)}", 
    "tags/#{slug(tag_name)}", 
    pages: pages, 
    categories: categories, 
    months: months, 
    days: days, 
    tags: tag_counts, 
    post_is_expired_proc: post_is_expired_proc)
end

years.each do |year,posts|
  post_index_page(posts, 
    "Posts from #{year}", 
    "#{year}", 
    "#{year}", 
    pages: pages, 
    categories: categories, 
    months: months, 
    days: days, 
    tags: tag_counts, 
    post_is_expired_proc: post_is_expired_proc)
end

months.each do |month,posts|
  time = Time.parse(month)
  post_index_page(posts, 
    "Posts from #{time.strftime "%b %Y"}", 
    "#{month}", 
    "#{month}", 
    pages: pages, 
    calendar_time: time, 
    categories: categories, 
    months: months, 
    days: days, 
    tags: tag_counts, 
    post_is_expired_proc: post_is_expired_proc)
end

days.each do |day,posts|
  time = Time.parse(day)
  post_index_page(posts, 
    "Posts from #{time.strftime "%d %b %Y"}", 
    "#{day}", 
    "#{day}", 
    pages: pages, 
    calendar_time: time, 
    categories: categories, 
    months: months, 
    days: days, 
    tags: tag_counts, 
    post_is_expired_proc: post_is_expired_proc)
end

post_index_page(posts.values, 
  "Home", 
  "", 
  "posts", 
  pages: pages, 
  categories: categories, 
  months: months, 
  days: days, 
  tags: tag_counts, 
  post_is_expired_proc: post_is_expired_proc)


table = {}
post_table = {}

posts.each_with_index do |postcontent, i|
  c = renderplain postcontent[1]

  alpha = /^[a-z]+$/i
  exclude = ["i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself", "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself", "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that", "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had", "having", "do", "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because", "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between", "into", "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out", "on", "off", "over", "under", "again", "further", "then", "once", "here", "there", "when", "where", "why", "how", "all", "any", "both", "each", "few", "more", "most", "other", "some", "such", "no", "nor", "not", "only", "own", "same", "so", "than", "too", "very", "s", "t", "can", "will", "just", "don", "should", "now"]
  words = c.split(' ').select{ |x| alpha.match(x) }.map(&:downcase).uniq
  words = words - exclude
  words.each do |x|
    table[x] = [] if table[x].nil?
    table[x] << i
  end
  post_table[i] = postcontent[0]

  raw_page "meta/#{postcontent[0]}" do
    elem = Weaver::Elements.new(@page, @anchors)
    elem.instance_eval do
      render_post_summary(postcontent[1])
    end
  
    text({
      xrender: elem.generate
    }.to_json)
  end
end

blog_page(
  "Search", 
  "search",
  pages: pages, 
  categories: categories, 
  months: months, 
  days: days, 
  tags: tag_counts, 
  cache_expired: true) do

  h1 "Search Results"

  h4 id: :count do
  end

  hr

  div class: 'page-nav', id: 'page-nav-top' do
  end

  br

  div id: 'results' do
  end

  div class: 'page-nav', id: 'page-nav-bottom' do
  end

  on_page_load <<-SCRIPT
    function getParameterByName(name, url) {
      if (!url) url = window.location.href;
      name = name.replace(/[\\[\\]]/g, '\\\\$&');
      var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
      if (!results) return null;
      if (!results[2]) return '';
      return decodeURIComponent(results[2].replace(/\\+/g, ' '));
    }

    String.prototype.replaceAll = function(search, replacement) {
      var target = this;
      return target.replace(new RegExp(search, 'g'), replacement);
    };

    var words = #{table.inspect.gsub('=>', ': ')};
    var posts = #{post_table.inspect.gsub('=>', ': ')};

    var resultElem = document.getElementById('results');
    var countElem = document.getElementById('count');

    var navTop = document.getElementById('page-nav-top');
    var navBottom = document.getElementById('page-nav-bottom');

    var searchText = getParameterByName('searchtext');
    var page = parseInt(getParameterByName('page')) || 0;
    var limit = 15;
    var resultList = words[searchText];

    function add_to_nav(html)
    {
      navTop.innerHTML += html;
      navBottom.innerHTML += html;
    }

    if (page > 0)
    {
      add_to_nav('<span class="previous-entries"><a href="?searchtext='+searchText+"&page="+(page-1)+'">Newer Entries</a></span>')
    }

    var lastResult = (page+1)*limit - 1;
    if (lastResult >= resultList.length)
    {
      lastResult = (resultList.length - 1);
    }
    else
    {
      add_to_nav('<span class="next-entries"><a href="?searchtext='+searchText+"&page="+(page+1)+'">Older Entries</a></span>')
    }

    var requestList = [];

    function Request(signature)
    {
      countElem.innerText = "Displaying result " + (page * limit + 1) + ' to result ' + (lastResult+1) + ' out of ' + resultList.length + ' results';
      var elementId = 'load_' + signature;

      this.run = function(oncomplete)
      {
        $.ajax({
          dataType: "json",
          url: '/meta/' + posts[signature],
          success: function(json)
          {
            var blockElem = document.getElementById(elementId);
            blockElem.innerHTML = json.xrender;
            if (oncomplete)
            {
              oncomplete();
            }
          }
        });  
      }
      
      this.div = '<div id="' + elementId + '">' + '</div>';

      return this;
    }

    function runNextRequest()
    {
      if(requestList.length)
      {
        var req = requestList.shift();
        req.run(runNextRequest);
      }
    }

    if(resultList)
    {
      for(var idx=page * limit; idx < (page + 1) * limit && idx < resultList.length; idx++)
      {
        var req = new Request(resultList[idx]);
        requestList.push(req);
        resultElem.innerHTML += req.div;
      }
      runNextRequest();
    }
    else
    {
      resultElem.innerText = "Not sure if real search: " + searchText;
    }

  SCRIPT

end

File.write(post_modified_dates_cache_file, post_modified_dates.to_json)
